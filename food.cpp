#include "food.h"
#include "tools.h"
#include <stdio.h>
#include <iostream>
extern int m_initmap[][50];                 // 全局地图变量

/**************************************** 被吃标记 *************************************************/
// 1.功能:  返回食物被吃标记
// 2.参数: 无
// 3.返回值: 无
// 4.其他值： 
// 5.实现方式：
/***************************************************************************************************/
int CFood::getFoodFlag()                    
{
	return m_foodFlag;
}


/**************************************** 食物位置 *************************************************/
// 1.功能: 返回一个COORD类型的指针，指向了代表着食物位置的坐标
// 2.参数: 无
// 3.返回值: 无
// 4.其他值： 
// 5.实现方式：
/***************************************************************************************************/
COORD* CFood::getFoodPsition()
{
	return &m_foodPosition;
}


/**************************************** 设置标记 *************************************************/
// 1.功能: 设置食物被吃的标记
// 2.参数: int newFoodFlag,代表着食物被吃状态的值
// 3.返回值: 无
// 4.其他值： 
// 5.实现方式：
/***************************************************************************************************/
void CFood::setFoodFlag(int newFoodFlag)
{
	this->m_foodFlag = newFoodFlag;
}


/**************************************** 设置食物 *************************************************/
// 1.功能: 设置食物的位置
// 2.参数: x,列坐标， y，横坐标
// 3.返回值: 无
// 4.其他值： 
// 5.实现方式：
/***************************************************************************************************/
void CFood::setFoodPosition(int x, int y)
{
	m_foodPosition.X = x;
	m_foodPosition.Y = y;
}


/**************************************** 打印食物 *************************************************/
// 1.功能: 通过坐标和内容将食物图案输出到屏幕上
// 2.参数: col列坐标，row横坐标， content食物图案
// 3.返回值: 无
// 4.其他值： 
// 5.实现方式：
/***************************************************************************************************/
void CFood::writeFood(int col, int row, char* content, int y)
{
	setCursorPosition(col, row);
	printf(content);
}


/**************************************** 生成食物 *************************************************/
// 1.功能: 清除原来的食物，打印新的食物
// 2.参数: 无
// 3.返回值: 无
// 4.其他值： 
// 5.实现方式：判断新生成的食物是否与障碍重合并且距离边框不能小于5，否则继续重新随机生成食物
/***************************************************************************************************/
void  CFood::drawFood()
{
    setCursorPosition(m_foodPosition.X, m_foodPosition.Y);
    std::cout << "  ";
    while (true)
    {
        int nSign = 0; // 重合的标记,如果重合置为1，continue循环，重新生成
        setFoodPosition(rand() % 45, rand() % 45);
        /*判断能不能重合障碍*/
        for (int i = 0; i < 55; i++)
        {
            for (int j = 0; j < 55; j++)
            {
                if (m_initmap[i][j] == 1 || m_initmap[i][j] == 2)
                {
                    if (m_foodPosition.Y == i && m_foodPosition.X == j)
                    {
                        nSign = 1;
                        break;
                    }
                }
            }
            if (nSign == 1)
            {
                break;
            }
        }
        if (nSign == 1)
        {
            continue;
        }
        /*食物随机值小于5的情况下，再次随机，防止左侧和上侧距离边框过近*/
        if (getFoodPsition()->X > 5 && getFoodPsition()->Y > 5)
        {
            break;
        }
    }
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED | FOREGROUND_INTENSITY);
    writeFood(getFoodPsition()->X, getFoodPsition()->Y, (char*)"★");
}


/**************************************** 初始食物 *************************************************/
// 1.功能: 用于第一次进入游戏时生成一个食物而不是到时间再生成一个事物
// 2.参数: 无
// 3.返回值: 无
// 4.其他值： 
// 5.实现方式：
/***************************************************************************************************/
void  CFood::drawOldFood()
{
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED | FOREGROUND_INTENSITY);
    writeFood(getFoodPsition()->X, getFoodPsition()->Y, (char*)"★");
}

