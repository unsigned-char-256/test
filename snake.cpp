#include "snake.h"
#include <stdio.h>
#include "tools.h"
extern int m_initmap[][50];


/**************************************** 打印蛇身 *************************************************/
// 1.功能: 根据不同的参数实现清空蛇和打印蛇
// 2.参数: n 1代表打印蛇，0代表清空蛇
// 3.返回值: 无
// 4.其他值：无
// 5.实现方式：n 是1时，打印，是0时，消失
/***************************************************************************************************/
void CSnake::writeSnake(int n)
{
    for (int i = 0; i < m_sankeLength; i++)
    {
		if (n == 1)
		{
            if (i == 0)
            {
                setColor(2);
                setCursorPosition(m_snake[i].X, m_snake[i].Y);
                printf("●");
            }
            else
            {
                setCursorPosition(m_snake[i].X, m_snake[i].Y);
                printf("■");
            }
        }
        else if (n == 0)
        {
            setCursorPosition(m_snake[i].X, m_snake[i].Y);
            printf("  ");
        }
    }
}


/**************************************** 获取长度 *************************************************/
// 1.功能: 获取蛇的长度
// 2.参数: 无
// 3.返回值: int类型的蛇身长度
// 4.其他值; 无
// 5.实现方式：
/***************************************************************************************************/
int CSnake::getSankeLength()
{
	return m_sankeLength;
}



/**************************************** 获取蛇身 *************************************************/
// 1.功能: 返回蛇身的坐标数组指针
// 2.参数: 无
// 3.返回值: COORD类型的指针
// 4.其他值：无
// 5.实现方式：
/***************************************************************************************************/
COORD* CSnake::getSnake()
{
	return m_snake;
}


/**************************************** 获取方向 *************************************************/
// 1.功能: 获取蛇当前的行进方向
// 2.参数: 无
// 3.返回值: int类型的蛇身长度
// 4.其他值：无
// 5.实现方式：
/***************************************************************************************************/
int CSnake::getMoveDirection()
{
	return m_moveDirection;
}


/**************************************** 设置方向 *************************************************/
// 1.功能: 设置蛇的行=行进方向
// 2.参数:  int类型的方向数值
// 3.返回值: 无
// 4.其他值：无
// 5.实现方式：
/***************************************************************************************************/
void CSnake::setMoveDirection(int newMoveDirection)
{
	this->m_moveDirection = newMoveDirection;
}



/**************************************** 设置长度 *************************************************/
// 1.功能: 增加一个蛇身长度
// 2.参数: 参数无意义，可以去掉
// 3.返回值: 
// 4.其他值：
// 5.实现方式：
/***************************************************************************************************/
void CSnake::setSnakeLength(int n)
{
	this->m_sankeLength += 1;
}


/**************************************** 修改坐标 *************************************************/
// 1.功能: 修改蛇身的坐标，将蛇根据行进方向向前移动一个距离
// 2.参数: 无
// 3.返回值: 无
// 4.其他值：
// 5.实现方式：
/***************************************************************************************************/
void CSnake::updateCoordinates()
{
    // 先将蛇头后面的向前移动
    for (int i = m_sankeLength - 1; i >= 0; i--)
    {
        m_snake[i + 1].X = m_snake[i].X;
        m_snake[i + 1].Y = m_snake[i].Y;
    }
    // 根据按键情况(改变蛇头坐标)
    switch (m_moveDirection)
    {
    case 72:
        m_snake[0].Y--;
        break;
    case 80:
        m_snake[0].Y++;
        break;
    case 75:
        m_snake[0].X--;
        break;
    case 77:
        m_snake[0].X++;
        break;
    }
}



/**************************************** 结束判断 *************************************************/
// 1.功能: 判断是否撞墙或者撞到自身
// 2.参数:  x,y是蛇头的列坐标和行坐标
// 3.返回值: 撞到了的返回TRUE，没有撞到返回FALSE
// 4.其他值：
// 5.实现方式：将蛇头的坐标分别与每一个地图点和自身其他的点作比较，坐标重合为撞到
/***************************************************************************************************/
bool CSnake::isCollision(int x, int y)
{
    for (int i = 0; i < 50; i++)
    {
        for (int j = 0; j < 50; j++)
        {
            if ((m_initmap[i][j] == 1 || m_initmap[i][j] == 2) && (x == j && y == i))
            {// 撞墙之后，将蛇的坐标重新置为初始状态
                m_sankeLength = 4;
                for (int i = 0; i < 4; i++)
                { // 初始蛇的坐标
                    m_snake[i].X = 18 - i;
                    m_snake[i].Y = 25;
                }
                m_moveDirection = 77;
                return true;
            }
        }

    }
    /*蛇身重合判断*/
    for (int i = 1; i < m_sankeLength; i++)
    {
        if (x == m_snake[i].X && y == m_snake[i].Y) return true;
    }
    return false;
}



/**************************************** 读档长度 *************************************************/
// 1.功能: 将读取到的存档蛇的长度设置为当前游戏蛇的长度
// 2.参数: n为无渠道的蛇的长度
// 3.返回值: 无
// 4.其他值：无
// 5.实现方式：
/***************************************************************************************************/
void CSnake::resetSnakeLength(int n)
{
    m_sankeLength = n;
}



/**************************************** 读档蛇身 *************************************************/
// 1.功能: 将读取到的存档蛇的蛇身设置为当前游戏蛇身
// 2.参数: COORD类型的指针，指向结构体中保存的蛇身
// 3.返回值: 无
// 4.其他值：无
// 5.实现方式：
/***************************************************************************************************/
void CSnake::resetSnake(COORD(*p))
{
    for (int i = 0; i < 200; i++)
    {
        m_snake[i].X = p[i].X;
        m_snake[i].Y = p[i].Y;
    }
}



/**************************************** 存档蛇身 *************************************************/
// 1.功能: 存档将蛇身坐标放进结构体数组中
// 2.参数: 结构体中COORD类型的指针，
// 3.返回值: 无
// 4.其他值：无
// 5.实现方式：
/***************************************************************************************************/
void CSnake::copySnake(COORD(*p))
{
    for (int i = 0; i < 200; i++)
    {
        p[i].X = m_snake[i].X;
        p[i].Y = m_snake[i].Y;
    }
}
